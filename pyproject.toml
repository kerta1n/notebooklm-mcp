[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "notebooklm-mcp"
version = "1.0.0"
description = "Professional MCP server for NotebookLM automation with streaming support"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "NotebookLM MCP Team", email = "support@notebooklm-mcp.dev"}
]
maintainers = [
    {name = "NotebookLM MCP Team", email = "support@notebooklm-mcp.dev"}
]
keywords = ["mcp", "notebooklm", "automation", "ai", "llm", "streaming"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.10"
dependencies = [
    "selenium>=4.22.0",
    "mcp>=1.2.0",
    "anyio>=4.4.0",
    "trio>=0.26.0",
    "async-timeout>=4.0.3",
    "loguru>=0.7.2",
    "pydantic>=2.8.2",
    "undetected-chromedriver>=3.5.4",
    "click>=8.0.0",
    "rich>=13.0.0",
    "typing-extensions>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
    "mkdocstrings[python]>=0.23.0",
]

[project.urls]
Homepage = "https://github.com/notebooklm-mcp/notebooklm-mcp"
Documentation = "https://notebooklm-mcp.readthedocs.io"
Repository = "https://github.com/notebooklm-mcp/notebooklm-mcp"
Issues = "https://github.com/notebooklm-mcp/notebooklm-mcp/issues"
Changelog = "https://github.com/notebooklm-mcp/notebooklm-mcp/blob/main/CHANGELOG.md"

[project.scripts]
notebooklm-mcp = "notebooklm_mcp.cli:main"
notebooklm-server = "notebooklm_mcp.server:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["notebooklm_mcp*"]

[tool.setuptools.package-data]
"notebooklm_mcp" = ["py.typed", "*.json", "*.yaml", "*.yml"]

# Development tools configuration
[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["notebooklm_mcp"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "selenium.*",
    "undetected_chromedriver.*",
    "mcp.*",
    "loguru.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "-p", "no:napari",
    "-p", "no:napari-plugin-engine",
    "-p", "no:npe2", 
    "-p", "no:cov",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "browser: marks tests that require a browser",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]