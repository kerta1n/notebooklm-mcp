name: "🚀 Auto Release on Main"

on:
  workflow_run:
    workflows: ["🧪 Tests & Quality with UV"]
    types:
      - completed
    branches: [ main ]
  push:
    branches: [ main ]
    paths:
      - '!src/**'
      - '!tests/**'
      - '!pyproject.toml'
      - '!.github/workflows/test.yml'
      - 'docs/**'
      - 'README.md'
      - '.github/workflows/**'
      - 'Taskfile.yml'
      - 'docker-compose.yml'
      - 'Dockerfile'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

# Cancel previous runs when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Check if tests passed and determine if we should release
  check-prerequisites:
    name: "🔍 Check Prerequisites"
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      is_manual: ${{ steps.check.outputs.is_manual }}
      trigger_type: ${{ steps.check.outputs.trigger_type }}
    steps:
    - name: "📥 Checkout repository"
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: "🔍 Check prerequisites"
      id: check
      run: |
        EVENT_NAME="${{ github.event_name }}"
        IS_MANUAL="${{ github.event_name == 'workflow_dispatch' }}"
        
        echo "Event: $EVENT_NAME"
        echo "Is manual: $IS_MANUAL"
        
        if [[ "$IS_MANUAL" == "true" ]]; then
          echo "should_release=true" >> $GITHUB_OUTPUT
          echo "trigger_type=manual" >> $GITHUB_OUTPUT
          echo "🚀 Manual release triggered"
          
        elif [[ "$EVENT_NAME" == "workflow_run" ]]; then
          # Triggered by test workflow completion
          WORKFLOW_CONCLUSION="${{ github.event.workflow_run.conclusion }}"
          COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
          
          echo "Tests workflow conclusion: $WORKFLOW_CONCLUSION"
          echo "Commit SHA: $COMMIT_SHA"
          
          # Get commit message from the triggering commit
          git fetch origin $COMMIT_SHA
          COMMIT_MSG=$(git log --format=%B -n 1 $COMMIT_SHA)
          echo "Commit message: $COMMIT_MSG"
          
          # Skip if this is a version bump commit
          if [[ "$COMMIT_MSG" =~ ^(chore|bump|release):.*version.* ]]; then
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "trigger_type=workflow_run" >> $GITHUB_OUTPUT
            echo "⏭️ Skipping auto-release (version bump commit)"
          elif [[ "$WORKFLOW_CONCLUSION" == "success" ]]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "trigger_type=workflow_run" >> $GITHUB_OUTPUT
            echo "✅ Tests passed, proceeding with auto-release"
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "trigger_type=workflow_run" >> $GITHUB_OUTPUT
            echo "❌ Tests failed, skipping auto-release"
          fi
          
        elif [[ "$EVENT_NAME" == "push" ]]; then
          # Direct push trigger (non-code changes)
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Direct push commit: $COMMIT_MSG"
          
          # Skip if this is a version bump commit
          if [[ "$COMMIT_MSG" =~ ^(chore|bump|release):.*version.* ]]; then
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "trigger_type=push" >> $GITHUB_OUTPUT
            echo "⏭️ Skipping auto-release (version bump commit)"
          else
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "trigger_type=push" >> $GITHUB_OUTPUT
            echo "✅ Non-code changes detected, proceeding with auto-release"
          fi
        fi
        
        echo "is_manual=$IS_MANUAL" >> $GITHUB_OUTPUT

  # Version bump and release
  auto-release:
    name: "🚀 Auto Version Bump & Release"
    runs-on: ubuntu-latest
    needs: check-prerequisites
    if: needs.check-prerequisites.outputs.should_release == 'true'
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
      tag_name: ${{ steps.bump.outputs.tag_name }}
    steps:
    - name: "📥 Checkout repository"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: "⚡ Install UV"
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        export PATH="$HOME/.cargo/bin:$PATH"

    - name: "🐍 Set up Python"
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        uv python install 3.10

    - name: "📦 Install dependencies"
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        uv sync --all-groups

    - name: "📈 Determine version bump type"
      id: version-type
      run: |
        if [[ "${{ needs.check-prerequisites.outputs.is_manual }}" == "true" ]]; then
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
        else
          # Get commit SHA from workflow_run event or current HEAD
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
            git fetch origin $COMMIT_SHA
            COMMIT_MSG=$(git log --format=%B -n 1 $COMMIT_SHA)
          else
            COMMIT_MSG=$(git log -1 --pretty=%B)
          fi
          
          echo "Analyzing commit: $COMMIT_MSG"
          
          # Auto-determine based on commit message
          if echo "$COMMIT_MSG" | grep -i "breaking\|major"; then
            VERSION_TYPE="major"
          elif echo "$COMMIT_MSG" | grep -i "feat\|feature\|minor"; then
            VERSION_TYPE="minor"  
          else
            VERSION_TYPE="patch"
          fi
        fi
        
        echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
        echo "🔖 Version bump type: $VERSION_TYPE"

    - name: "📝 Bump version"
      id: bump
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        
        # Get current version using tomli (compatible with Python 3.10)
        CURRENT_VERSION=$(uv run python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
        echo "Current version: $CURRENT_VERSION"
        
        # Calculate new version
        VERSION_TYPE="${{ steps.version-type.outputs.version_type }}"
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        case $VERSION_TYPE in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        TAG_NAME="v$NEW_VERSION"
        
        echo "New version: $NEW_VERSION"
        echo "Tag name: $TAG_NAME"
        
        # Update pyproject.toml
        sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml
        
        # Verify update using tomli
        UPDATED_VERSION=$(uv run python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
        echo "Updated version: $UPDATED_VERSION"
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

    - name: "📝 Commit version bump"
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml
        git commit -m "chore: bump version to ${{ steps.bump.outputs.new_version }}"
        git push

    - name: "🏷️ Create and push tag"
      run: |
        git tag ${{ steps.bump.outputs.tag_name }}
        git push origin ${{ steps.bump.outputs.tag_name }}
        echo "✅ Created and pushed tag: ${{ steps.bump.outputs.tag_name }}"

    - name: "🚀 Trigger release workflow"
      run: |
        echo "🚀 Release workflow will be triggered by the new tag: ${{ steps.bump.outputs.tag_name }}"
        echo "📦 Package version ${{ steps.bump.outputs.new_version }} will be published to PyPI"

  # Summary
  summary:
    name: "📋 Auto-Release Summary"
    runs-on: ubuntu-latest
    needs: [check-prerequisites, auto-release]
    if: always()
    steps:
    - name: "📋 Summary"
      run: |
        echo "## 🚀 Auto-Release Summary"
        echo "**Should Release:** ${{ needs.check-prerequisites.outputs.should_release }}"
        echo "**Release Result:** ${{ needs.auto-release.result }}"
        
        if [[ "${{ needs.auto-release.result }}" == "success" ]]; then
          echo "✅ **Success!** New version ${{ needs.auto-release.outputs.new_version }} created"
          echo "🏷️ **Tag:** ${{ needs.auto-release.outputs.tag_name }}"
          echo "📦 **Release workflow triggered automatically**"
        elif [[ "${{ needs.check-prerequisites.outputs.should_release }}" == "false" ]]; then
          echo "⏭️ **Skipped** - Prerequisites not met (version bump commit or tests failed)"
        else
          echo "❌ **Failed** - Auto-release encountered an error"
        fi