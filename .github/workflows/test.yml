name: "🧪 Tests & Quality with UV"

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Cancel previous runs when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTEST_DISABLE_PLUGIN_AUTOLOAD: 1
  QT_QPA_PLATFORM: offscreen
  UV_PYTHON: python3.10

jobs:
  test:
    name: "🧪 Unit Tests with UV (Python ${{ matrix.python-version }})"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - name: "📥 Checkout repository"
      uses: actions/checkout@v4

    - name: "⚡ Install UV"
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        export PATH="$HOME/.cargo/bin:$PATH"

    - name: "🐍 Set up Python ${{ matrix.python-version }}"
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        uv python install ${{ matrix.python-version }}

    - name: "📋 Install Task"
      uses: arduino/setup-task@v2
      with:
        version: 3.x
      continue-on-error: true
      id: setup-task

    - name: "📋 Install Task (fallback)"
      if: steps.setup-task.outcome == 'failure'
      run: |
        echo "Arduino setup failed, using direct installation..."
        sudo sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin

    - name: "✅ Verify UV Installation"
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        echo "UV version:"
        uv --version
        echo "UV Python installations:"
        uv python list
        echo "Current PATH:"
        echo $PATH

    - name: "🗂️ Cache UV dependencies"
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: "🌐 Install Chrome"
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

    - name: "📦 Install dependencies with UV"
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        echo "Setting up project with UV..."
        uv sync --all-groups
      env:
        UV_PYTHON: ${{ matrix.python-version }}

    - name: "📋 Show available tasks"
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        task --list

    - name: "🔍 Lint and format"
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        echo "🦀 Running Ruff linter..."
        uv run ruff check src/ tests/ --fix
        echo "⚫ Formatting with Black..."
        uv run black src/ tests/
        echo "📊 Sorting imports..."
        uv run isort src/ tests/

    - name: "🧪 Run unit tests with coverage"
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        echo "📊 Running coverage analysis..."
        uv run coverage run --source=src/notebooklm_mcp -m pytest tests/test_config.py tests/test_config_real.py tests/test_comprehensive_simple.py --junitxml=junit.xml
        uv run coverage report --show-missing
        uv run coverage xml
        uv run coverage html
        echo "📋 Coverage report generated in htmlcov/"
      env:
        QT_QPA_PLATFORM: offscreen
        PYTEST_DISABLE_PLUGIN_AUTOLOAD: 1

    - name: "📊 Upload test results to Codecov"
      if: ${{ !cancelled() }}
      uses: codecov/test-results-action@v1
      with:
        file: ./junit.xml
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: "📈 Upload coverage to Codecov"
      if: ${{ !cancelled() }}
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
        verbose: true