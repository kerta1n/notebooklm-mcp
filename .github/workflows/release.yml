name: "🚀 Release with UV"

on:
  push:
    tags:
      - 'v*'
  release:
    types: [created, published]
  repository_dispatch:
    types: [release-trigger]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name to release (e.g., v2.0.1)'
        required: true
        type: string
      version:
        description: 'Version number (e.g., 2.0.1)'
        required: true
        type: string

# Permissions needed for release operations
permissions:
  contents: write    # Required to create releases and upload assets
  id-token: write    # Required for trusted publishing to PyPI
  actions: read      # Required to read workflow artifacts

# Cancel previous release runs for the same tag
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Setup and validation
  setup:
    name: "⚡ Setup & Validation"
    runs-on: ubuntu-latest
    steps:
    - name: "📥 Checkout repository"
      uses: actions/checkout@v4

    - name: "⚡ Install UV"
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        export PATH="$HOME/.cargo/bin:$PATH"

    - name: "🐍 Set up Python"
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        uv python install 3.11

    - name: "✅ Verify UV Installation"
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        echo "UV version:"
        uv --version
        echo "UV Python installations:"
        uv python list
        echo "✅ Setup completed successfully"

    - name: "📦 Install dependencies"
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        echo "📦 Installing project dependencies..."
        uv sync --all-groups
        echo "✅ Dependencies installed"

  # Pre-release tests
  pre-release-tests:
    name: "🧪 Pre-Release Tests"
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: "📥 Checkout repository"
      uses: actions/checkout@v4

    - name: "⚡ Install UV"
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        export PATH="$HOME/.cargo/bin:$PATH"

    - name: "🐍 Set up Python"
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        uv python install 3.11

    - name: "📦 Install dependencies"
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        uv sync --all-groups

    - name: "🧪 Run critical tests"
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        echo "🧪 Running critical tests before release..."
        uv run pytest tests/test_config.py tests/test_config_real.py -v
        echo "✅ Critical tests passed"

    - name: "🔍 Quality check"
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        echo "🔍 Running quality checks..."
        uv run ruff check src/ tests/
        echo "✅ Quality checks passed"

  # Build package
  build:
    name: "🏗️ Build Package"
    runs-on: ubuntu-latest
    needs: [setup, pre-release-tests]
    steps:
    - name: "📥 Checkout repository"
      uses: actions/checkout@v4

    - name: "⚡ Install UV"
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        export PATH="$HOME/.cargo/bin:$PATH"

    - name: "🐍 Set up Python"
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        uv python install 3.11

    - name: "📦 Install dependencies"
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        uv sync --all-groups

    - name: "🏗️ Build package"
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        echo "🏗️ Building package with UV..."
        uv build
        echo "✅ Package built successfully"

    - name: "✅ Validate package"
      run: |
        export PATH="$HOME/.cargo/bin:$PATH"
        echo "✅ Validating package quality..."
        uv run twine check dist/*
        echo "✅ Package validation passed"

    - name: "📦 Upload build artifacts"
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/

  # Production publish to PyPI
  publish:
    name: "🎉 Publish to PyPI"
    runs-on: ubuntu-latest
    needs: build
    if: always() && needs.build.result == 'success'
    environment: production
    steps:
    - name: "📥 Checkout repository"
      uses: actions/checkout@v4

    - name: "📦 Download build artifacts"
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/

    - name: "🎉 Publish to PyPI"
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

    - name: "✅ Production publish completed"
      run: echo "🎉 Package published to PyPI successfully!"

  # Create GitHub release
  github-release:
    name: "🏷️ GitHub Release"
    runs-on: ubuntu-latest
    needs: [publish]
    steps:
    - name: "📥 Checkout repository"
      uses: actions/checkout@v4

    - name: "📦 Download build artifacts"
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/

    - name: "🏷️ Create GitHub Release"
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.event.inputs.tag_name || github.ref_name }}
        name: Release ${{ github.event.inputs.tag_name || github.ref_name }}
        draft: false
        prerelease: false
        files: dist/*
        generate_release_notes: true

    - name: "✅ GitHub release completed"
      run: |
        echo "🏷️ GitHub release created successfully!"
        echo "📎 Release assets available in GitHub Releases page"

  # Post-release notifications
  post-release:
    name: "📢 Post-Release"
    runs-on: ubuntu-latest
    needs: [github-release]
    steps:
    - name: "📥 Checkout repository"
      uses: actions/checkout@v4

    - name: "📢 Release summary"
      run: |
        echo "🎉 Release completed successfully!"
        echo "📦 Package: notebooklm-mcp"
        echo "🏷️ Tag: ${{ github.ref }}"
        echo "🔗 PyPI: https://pypi.org/project/notebooklm-mcp/"
        echo "📚 GitHub: https://github.com/khengyun/notebooklm-mcp/releases"
        echo "✅ All release steps completed"